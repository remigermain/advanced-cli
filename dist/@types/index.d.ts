import { CliArgSet, CliArg, CliCmdSet, CliCmd, CliParserOptions, CliError, CliContext, CliFinal, Obj } from "./declare";
declare class CliParser {
    name: string;
    description: string;
    protected commands: Obj<CliCmd>;
    protected arguments: Obj<CliArg>;
    protected errors: CliError[];
    protected _ctx: CliContext | null;
    protected options: CliParserOptions;
    protected argv: string[];
    constructor(name: string, description: string, options?: CliParserOptions);
    checkAlias(choices: Obj<CliArg>, arg: CliArg): void;
    addArgument(name: string, arg?: CliArgSet): void;
    addCommand(name: string, description: string, cmd?: CliCmdSet): void;
    protected convertType(type: any, value: string): string | boolean | number;
    advFlag(argv: string[], index: number, choices: Obj<CliArg>, cliArgs: CliFinal, name: string): number;
    parseFlags(argv: string[], choices: Obj<CliArg>, start?: number): [CliFinal, string[]];
    parseCommand(argv: string[]): boolean;
    parseArguments(argv: string[]): boolean;
    parse(argv: string[]): boolean;
    _getCallFlag(flags: CliFinal, args: Obj<CliArg>): Function | null;
    get context(): CliContext;
    _createContext(flags: CliFinal, anyArgs: string[], cmd?: CliCmd | null): CliContext;
    printError(max?: number | null): void;
    protected formatOptions(options: Obj<CliArg>, prefix?: string): string;
    protected formatCommands(cmds: Obj<CliCmd>): string;
    commandUsage(cmd: CliCmd | string): void;
    usage(): void;
}
export default CliParser;
