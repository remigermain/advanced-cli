!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("colorette")):"function"==typeof define&&define.amd?define(["colorette"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).index=e(t.colorette)}(this,(function(t){"use strict";function e(t){for(const e in t)return!1;return!0}function n(t,e){const n=[];let r=-1,s=0;if(!t)return n;for(;s<t.length;)t[s]==e&&(n.push(t.substring(r+1,s)),r=s),s++;return n.push(t.substring(r+1,t.length)),n}const r=e=>`Found argument '${t.yellow(`-${e}`)}' which wasn't expected, or isn't valid in this context.`,s=e=>`Empty argument '${t.yellow(e)}' which wasn't expected.`,o=(e,n)=>`Invalid arugments for flag '${t.yellow(e)}', ${n}`,a=`Invalid formating flag, need to be '${t.yellow("flag")}=${t.yellow("value")}(${t.yellow(",value...")})'`,i=`need a valid boolean, choice are '${t.yellow("true")}' or '${t.yellow("false")}'`,l=`need a valid ${t.italic(t.yellow("number"))}.`;return class{constructor(t,e,n={}){this.name=t,this.description=e,this.commands={},this.arguments={},this.errors=[],this._ctx=null,this.argv=[],this.options=Object.assign({defaultArg:!0},n),this.options.defaultArg&&(this.addArgument("help",{alias:"h",description:"Prints help information",call({parser:t}){t.usage()}}),this.options.version&&this.addArgument("version",{alias:"v",description:"Print version info and exit",call({options:t,name:e}){console.info(`${e} ${t.version}`)}}))}checkArguments(e,n){if(n.name in this.arguments)throw new Error(`duplicate options '${n.name}'`);if(n.name.length<2)throw new Error(`name arguments '${n.name}' need to be upper than one char`);if(this.options.inline&&function(t,e){for(let n=0;n<t.length;n++)if(t[n]===e)return!0;return!1}(n.name,"="))throw new Error(`name arguments '${n.name}' can't contains '${t.yellow("=")}' in here name`);n.params?n.params.forEach((t=>{const e=void 0!==t.type,r=void 0!==t.validator;if(e&&r)throw new Error(`arguments '${n.name}' have 'type' and 'validator' set, you need only once`);if(!r&&!e)throw new Error(`arguments '${n.name}' not have 'type' and 'validator' set, you need set once`)})):n.params=[];const r=n.alias;if(r){if(void 0!==e[r])throw new Error(`duplicate alias options '${r}`);if(1!=r.length)throw new Error(`alias options '${r}' need to be only one char`);e[r]=n}}addArgument(t,e={}){const n=e;n.name=t,this.checkArguments(this.arguments,n),this.arguments[t]=n}addCommand(t,e,n={}){if(t in this.commands)throw new Error(`Command '${t}' already set`);const r=n;if(r.name=t,r.description=e,n.arguments){const t=Object.assign({},r.arguments);for(const e in n.arguments)r.arguments[e].name=e,this.checkArguments(t,r.arguments[e]);r.arguments=t}else r.arguments={};this.commands[t]=r}checkDefault(e){if(void 0!==e.default)return e.default;throw new Error((n=e.type,`need '${t.yellow(n.constructor.name.toLowerCase())}' arguments.`));var n}convertValue(t,e){if(t.type==Number){const t=Number(e);if(Number.isNaN(t))throw new Error(l);return t}if(t.type===Boolean)switch(e){case"true":case"yes":return!0;case"false":case"no":return!1;default:throw new Error(i)}return e}checkValue(t,e,n){return e.validator?e.validator(n,t):this.convertValue(e,n)}advFlagInline(e,r,s,i,l){const h=s[l[0]],c=[];if(i[h.name]=c,h.alias&&(i[h.alias]=c),2!=l.length)return this.addError(a,r,2),r+1;const m=n(l[1],",");if(m.length>h.params.length)return this.addError((u=h.name,d=h.params.length,`Need ${t.yellow(d)} arguments after flag '${t.yellow(`--${u}`)}'.`),r,l[0].length+2),r+1;var u,d;let g=2+h.name.length+1;for(let t=0;t<h.params.length;t++){const e=h.params[t],n=t>=m.length;try{n?c.push(this.checkDefault(e)):c.push(this.checkValue(c,e,m[t]))}catch(e){this.addError(o(h.name,e.message),r,g,n?0:m[t].length)}finally{n||(g+=m[t].length+1)}}return r+1}advFlag(t,e,n,r,s){const a=[];if(n[r.name]=a,r.alias&&(n[r.alias]=a),!r.params.length)return e;let i=0;for(let n=0;n<r.params.length;n++){const l=r.params[n],h=e+n>=t.length,c=!h&&"-"===t[e+n][0]||!1;try{c?(i++,a.push(this.checkDefault(l))):h?a.push(this.checkDefault(l)):a.push(this.checkValue(a,l,t[e+n]))}catch(t){return this.addError(o(s,t.message),e),e}}return e+r.params.length-i}parseMulti(t,e,o,a,i){if(2!=o.length){const s=o.substring(2),l=this.options.inline?n(s,"="):[s];void 0!==a[l[0]]?i=this.options.inline&&1!=l.length?this.advFlagInline(e,i,a,t,l):this.advFlag(e,i+1,t,a[s],s):this.addError(r(s),i++,2,o.length-2)}else this.addError(s("--"),i++,2,o.length-2);return i}parseSimple(t,e,n,s,o){let a=o;for(let i=1;i<=n.length-1;i++){const l=s[n[i]];void 0!==l?a=this.advFlag(e,a+1,t,l,n[i]):this.addError(r(n[i]),o,i,1)}return Math.max(o+1,a)}parseFlags(t,e,n=0){const r={},o=[];for(;n<t.length&&t[n]!==this.options.stopFlags;){const a=t[n];"-"!=a[0]?(o.push(a),n++):"-"==a[1]?n=this.parseMulti(r,t,a,e,n):1!=a.length?n=this.parseSimple(r,t,a,e,n):this.addError(s("-"),n++)}for(t[n]===this.options.stopFlags&&n++;n<t.length;)o.push(t[n++]);return[r,o]}parseCommand(e){if(e[0]in this.commands){const t=this.commands[e[0]],n=Object.assign(Object.assign({},this.arguments),t.arguments);n.help&&(n.help.call=({parser:t,cmd:e})=>{e&&t.commandUsage(e)});const[r,s]=this.parseFlags(e,n,1),o=this._createContext(r,s,t);if(this.errors.length)return!1;const a=this._getCallFlag(r,n);return a?a(o):t.call&&t.call(o),!0}var n;return this.addError("-"==e[0][0]?(n=e[0],`first argument '${t.yellow(n)}' need to be a command, not flags`):(e=>`No Such command '${t.yellow(e)}'`)(e[0]),0),!1}parseArguments(t){const[e,n]=this.parseFlags(t,this.arguments,0),r=this._createContext(e,n);if(this.errors.length)return!1;const s=this._getCallFlag(e,this.arguments);return s&&s(r),!0}parse(t){return this.argv=t,0==t.length?(this.usage(),!0):e(this.commands)?this.parseArguments(t):this.parseCommand(t)}_getCallFlag(t,e){for(const n in t){const t=e[n].call;if(t)return t}return null}get context(){if(!this._ctx)throw new Error("You need to call 'parse' before access context");return this._ctx}_createContext(t,e,n=null){const r={flags:t,anyArgs:e,parser:this,name:this.name,description:this.description,options:this.options,argv:this.argv};return n&&(r.cmd=n),this._ctx=r,r}addError(t,e,n,r){for(let s=0;s<this.errors.length;s++){const o=this.errors[s];if(o.argvi===e&&o.start===n&&o.end===r)return void o.text.push(t)}this.errors.push({text:[t],argvi:e,start:n,end:r})}printError(e=null){const n=this.argv,r=this.name+" "+n.join(" ")+"\n",s=this.name.length+1;let o=this.errors;null!==e&&(o=[...this.errors].splice(0,e));let a="";if(o.forEach((e=>{var o;if(a+=`${t.red(t.bold("error"))}: ${e.text.join("\n"+" ".repeat(7))}\n`,void 0!==e.argvi){a+=r;let i=e.argvi+s;for(let t=0;t<e.argvi;t++)i+=n[t].length;a+=" ".repeat(i);const l=(null===(o=n[e.argvi])||void 0===o?void 0:o.length)||1;void 0===e.start&&(e.start=0),void 0===e.end&&(e.end=l-e.start),a+=t.red("~".repeat(e.start))+t.red(t.bold("^".repeat(e.end)));const h=l-(e.start+e.end);h>0&&(a+=t.red("~".repeat(h))),a+="\n"}})),this.errors.length>=5){const e=this.errors.reduce(((t,e)=>e.text.length+t),0);a+=`total errors: ${t.red(t.bold(e))}`}console.error(a.trim())}formatOptions(e,n="Options:"){var r;const s={};for(const t in e)s[e[t].name]=e[t];const o={};let a=0;for(const t in s){const e=s[t];o[t]=t.length,e.params&&e.params.length&&(o[t]+=e.params.reduce(((t,e)=>t+e.type.name.length+3),0)),a=Math.max(a,o[t])}let i=n+"\n";for(const e in s){const n=s[e];i+=n.alias?`-${n.alias}, `:"    ",i+=`--${e} `,n.params&&(i+=n.params.reduce(((t,e)=>`${t}<${e.type.name.toLowerCase()}> `),"")),i+=" ".repeat(a-o[e]+1),i+=null!==(r=n.description)&&void 0!==r?r:t.italic("no information."),i+="\n"}return i}formatCommands(t){let e=0;for(const n in t)e=Math.max(e,n.length);let n="Commands:\n";for(const r in t)n+=`  ${r}${" ".repeat(e-r.length)} ${t[r].description}\n`;return n}commandUsage(t){if("string"==typeof t){const e=this.commands[t];if(!e)throw new Error(`not found '${t}' command.`);t=e}let e="";e+=`Usage: ${this.name} ${t.name} `,this.options.info?e+=this.options.info:e+="[OPTIONS]\n\n",e+=t.description,this.arguments&&(e+="\n\n"+this.formatOptions(this.arguments,"Global options:")),t.arguments&&(e+="\n\n"+this.formatOptions(t.arguments,"Command options:")),this.options.footer&&(e+=`\n\n${this.options.footer}`),console.log(e.trim())}usage(){let t="";const n=!e(this.commands),r=!e(this.arguments);t+=`Usage: ${this.name} `,this.options.info?t+=this.options.info:t+=(n?"COMMAND":"")+" [OPTIONS]\n\n",t+=this.description,r&&(t+="\n\n"+this.formatOptions(this.arguments)),n&&(t+="\n\n"+this.formatCommands(this.commands)),this.options.footer&&(t+=`\n\n${this.options.footer}`),console.info(t.trim())}}}));
