!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("picocolors")):"function"==typeof define&&define.amd?define(["picocolors"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).index=e(t.picocolors)}(this,(function(t){"use strict";function e(t){for(const e in t)return!1;return!0}function n(t,e){const n=[];let s=0,r=0;for(;t[r]==e;)r++;for(;r<t.length;)if(t[r]==e){for(n.push(t.substring(s,r));t[r]==e;)r++;s=r}else r++;return s!=t.length&&n.push(t.substring(s,t.length)),n}return class{constructor(t,e,n={}){this.name=t,this.description=e,this.commands={},this.arguments={},this.errors=[],this._ctx=null,this.argv=[],this.options=Object.assign({defaultArg:!0},n),this.options.defaultArg&&(this.addArgument("help",{alias:"h",description:"Prints help information",call({parser:t}){t.usage()}}),this.options.version&&this.addArgument("version",{alias:"v",description:"Print version info and exit",call({options:t,name:e}){console.info(`${e} ${t.version}`)}}))}checkArguments(e,n){if(n.name in this.arguments)throw new Error(`duplicate options '${n.name}'`);if(n.name.length<2)throw new Error(`name arguments '${n.name}' need to be upper than one char`);if(this.options.inline&&function(t,e){for(let n=0;n<t.length;n++)if(t[n]===e)return!0;return!1}(n.name,"="))throw new Error(`name arguments '${n.name}' can't contains '${t.yellow("=")}' in here name`);n.params?n.params.forEach((t=>{void 0===t.type&&(t.type=String)})):n.params=[];const s=n.alias;if(s){if(void 0!==e[s])throw new Error(`duplicate alias options '${s}`);if(1!=s.length)throw new Error(`alias options '${s}' need to be only one char`);e[s]=n}}addArgument(t,e={}){const n=e;n.name=t,this.checkArguments(this.arguments,n),this.arguments[t]=n}addCommand(t,e,n={}){if(t in this.commands)throw new Error(`Command '${t}' already set`);const s=n;if(s.name=t,s.description=e,n.arguments){const t=Object.assign({},s.arguments);for(const e in n.arguments)s.arguments[e].name=e,this.checkArguments(t,s.arguments[e]);s.arguments=t}else s.arguments={};this.commands[t]=s}checkDefault(e,n){if(void 0!==n.default)return n.default;throw new Error(`need ${t.yellow(e.params.length)} arguments after flag '${t.yellow(e.name)}'.`)}checkValue(e,n,s){if(n.validator)return n.validator(s,e);switch(n.type){case Number:{const e=Number(s);if(Number.isNaN(e))throw new Error(`need a valid ${t.italic(t.yellow("number"))}.`);return e}case Boolean:switch(s){case"true":case"yes":return!0;case"false":case"no":return!1;default:throw new Error(`boolean type, choise are '${t.yellow("true")}' or '${t.yellow("true")}'`)}default:return s}}advFlagInline(e,s,r,o,a){const i=r[a[0]],l=[];if(o[i.name]=l,i.alias&&(o[i.alias]=l),2!=a.length)return this.errors.push({text:`invalid formating flag, need to be '${t.yellow("flag")}=${t.yellow("value")}(${t.yellow(",value...")})'`,argvi:s,start:2}),s+1;const h=n(a[1],",");if(h.length>i.params.length)return this.errors.push({text:`need ${t.yellow(i.params.length)} arguments after flag '${t.yellow(`--${i.name}`)}'.`,argvi:s,start:a[0].length+2}),s+1;let c=2+i.name.length+1;for(let e=0;e<i.params.length;e++){const n=i.params[e],r=e>=h.length;try{r?l.push(this.checkDefault(i,n)):l.push(this.checkValue(l,n,h[e]))}catch(n){this.errors.push({text:`invalid arugments for flag '${t.yellow(i.name)}', ${n.message}`,argvi:s,start:c,end:r?0:h[e].length})}finally{r||(c+=h[e].length+1)}}return s+1}advFlag(e,n,s,r,o){const a=[];if(s[r.name]=a,r.alias&&(s[r.alias]=a),n++,!r.params.length)return n;let i=0;for(let s=0;s<r.params.length;s++){const l=r.params[s],h=n+s>=e.length,c=!h&&"-"===e[n+s][0]||!1;try{c?(i++,a.push(this.checkDefault(r,l))):h?a.push(this.checkDefault(r,l)):a.push(this.checkValue(a,l,e[n+s]))}catch(e){return this.errors.push({text:`invalid arugments for flag '${t.yellow(o)}', ${e.message}`,argvi:n}),n}}return n+r.params.length-i}parseFlags(e,s,r=0){const o={},a=[],i=this.options.stopFlags;for(;r<e.length;){const l=e[r];if(e[r]===i){r++;break}if("-"!=l[0])a.push(l),r++;else if("-"==l[1])if(2!=l.length){const a=l.substring(2);let i;i=this.options.inline?n(a,"="):[a],void 0!==s[i[0]]?r=this.options.inline&&1!=i.length?this.advFlagInline(e,r,s,o,i):this.advFlag(e,r,o,s[a],a):this.errors.push({text:`Found argument '${t.yellow(`--${a}`)}' which wasn't expected, or isn't valid in this context.`,argvi:r++,start:2,end:l.length-2})}else this.errors.push({text:`Empty argument '${t.yellow("--")}' which wasn't expected.`,argvi:r++,start:2,end:l.length-2});else if(1!=l.length){let n=r;for(let a=1;a<=l.length-1;a++){const i=s[l[a]];void 0!==i?n=this.advFlag(e,n,o,i,l[a]):this.errors.push({text:`Found argument '${t.yellow(`-${l[a]}`)}' which wasn't expected, or isn't valid in this context.`,argvi:r,start:a,end:1})}r=n===r?r+1:n}else this.errors.push({text:`Empty argument '${t.yellow("-")}' which wasn't expected.`,argvi:r++})}for(;r<e.length;)a.push(e[r++]);return[o,a]}parseCommand(e){if(e[0]in this.commands){const t=this.commands[e[0]],n=Object.assign(Object.assign({},this.arguments),t.arguments);n.help&&(n.help.call=({parser:t,cmd:e})=>{e&&t.commandUsage(e)});const[s,r]=this.parseFlags(e,n,1),o=this._createContext(s,r,t);if(this.errors.length)return!1;const a=this._getCallFlag(s,n);return a?a(o):t.call&&t.call(o),!0}return this.errors.push({text:`no such subcommand: '${t.yellow(e[0])}''`,argvi:0}),!1}parseArguments(t){const[e,n]=this.parseFlags(t,this.arguments,0),s=this._createContext(e,n);if(this.errors.length)return!1;const r=this._getCallFlag(e,this.arguments);return r&&r(s),!0}parse(t){return this.argv=t,0==t.length?(this.usage(),!0):"-"===t[0][0]||e(this.commands)?this.parseArguments(t):this.parseCommand(t)}_getCallFlag(t,e){for(const n in t){const t=e[n].call;if(t)return t}return null}get context(){if(!this._ctx)throw new Error("You need to call 'parse' before access context");return this._ctx}_createContext(t,e,n=null){const s={flags:t,anyArgs:e,parser:this,name:this.name,description:this.description,options:this.options,argv:this.argv};return n&&(s.cmd=n),this._ctx=s,s}printError(e=null){const n=this.argv,s=this.name+" "+n.join(" ")+"\n",r=this.name.length+1;let o=this.errors;null!==e&&(o=[...this.errors].splice(0,e));let a="";o.forEach((e=>{var o;if(a+=`${t.red(t.bold("error"))}: ${e.text}\n`,void 0!==e.argvi){a+=s;let i=e.argvi+r;for(let t=0;t<e.argvi;t++)i+=n[t].length;a+=" ".repeat(i);const l=(null===(o=n[e.argvi])||void 0===o?void 0:o.length)||1;void 0===e.start&&(e.start=0),void 0===e.end&&(e.end=l-e.start),a+=t.red("~".repeat(e.start))+t.red(t.bold("^".repeat(e.end)));const h=l-(e.start+e.end);h>0&&(a+=t.red("~".repeat(h))),a+="\n"}})),this.errors.length>=5&&(a+=`total errors: ${t.red(t.bold(this.errors.length))}`),console.error(a.trim())}formatOptions(e,n="Options:"){var s;const r={};for(const t in e)r[e[t].name]=e[t];const o={};let a=0;for(const t in r){const e=r[t];o[t]=t.length,e.params&&e.params.length&&(o[t]+=e.params.reduce(((t,e)=>t+e.type.name.length+3),0)),a=Math.max(a,o[t])}let i=n+"\n";for(const e in r){const n=r[e];i+=n.alias?`-${n.alias}, `:"    ",i+=`--${e} `,n.params&&(i+=n.params.reduce(((t,e)=>`${t}<${e.type.name.toLowerCase()}> `),"")),i+=" ".repeat(a-o[e]+1),i+=null!==(s=n.description)&&void 0!==s?s:t.italic("no information."),i+="\n"}return i}formatCommands(t,e="Commands:"){let n=0;for(const e in t)n=Math.max(n,e.length);let s=`${e}\n`;for(const e in t)s+=`  ${e}${" ".repeat(n-e.length)} ${t[e].description}\n`;return s}commandUsage(t){if("string"==typeof t){const e=this.commands[t];if(!e)throw new Error(`'${t}' not found in commands`);t=e}let e="";e+=`Usage: ${this.name} ${t.name} `,this.options.info?e+=this.options.info:e+="[OPTIONS]\n\n",e+=t.description,this.arguments&&(e+="\n\n"+this.formatOptions(this.arguments,"Global options:")),t.arguments&&(e+="\n\n"+this.formatOptions(t.arguments,"Command options:")),this.options.footer&&(e+=`\n\n${this.options.footer}`),console.log(e.trim())}usage(){let t="";const n=!e(this.commands),s=!e(this.arguments);t+=`Usage: ${this.name} `,this.options.info?t+=this.options.info:t+=`[OPTIONS] ${n?"COMMAND":""}\n\n`,t+=this.description,s&&(t+="\n\n"+this.formatOptions(this.arguments)),n&&(t+="\n\n"+this.formatCommands(this.commands)),this.options.footer&&(t+=`\n\n${this.options.footer}`),console.info(t.trim())}}}));
