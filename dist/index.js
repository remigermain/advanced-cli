!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("colorette")):"function"==typeof define&&define.amd?define(["colorette"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).index=e(t.colorette)}(this,(function(t){"use strict";function e(t){for(const e in t)return!1;return!0}return class{constructor(t,e,s={}){this.name=t,this.description=e,this.commands={},this.arguments={},this.errors=[],this._ctx=null,this.argv=[],this.options=Object.assign({defaultArg:!0},s),this.options.defaultArg&&(this.addArgument("help",{alias:"h",description:"Prints help information",call({parser:t}){t.usage()}}),this.options.version&&this.addArgument("version",{alias:"v",description:"Print version info and exit",call({options:t,name:e}){console.info(`${e} ${t.version}`)}}))}checkAlias(t,e){e.params||(e.params=[]);const s=e.alias;if(s){if(void 0!==t[s])throw new Error(`duplicate alias options '${s}`);if(1!=s.length)throw new Error(`alias options '${s}' need to be only one char`);t[s]=e}}addArgument(t,e={}){if(t in this.arguments)throw new Error(`duplicate options '${t}'`);if(t.length<2)throw new Error(`name arguments '${t}' need to be upper than one char`);const s=e;s.name=t,this.arguments[t]=s,this.checkAlias(this.arguments,s)}addCommand(t,e,s={}){if(t in this.commands)throw new Error(`Command '${t}' already set`);const n=s;if(n.name=t,n.description=e,this.commands[t]=n,s.arguments){const t=Object.assign({},n.arguments);for(const e in s.arguments)this.checkAlias(t,n.arguments[e]),n.arguments[e].name=e;n.arguments=t}else n.arguments={}}convertType(t,e){if(t===Number){const t=Number(e);if(Number.isNaN(t))throw new Error("nedd valid number.");return t}if(t!==Boolean)return e;switch(e){case"true":case"yes":return!0;case"false":case"no":return!1;default:throw new Error("boolean type, choise are 'true' or 'false'")}}advFlag(e,s,n,r,o){const i=[],a=n[o];if(r[o]=i,a.alias&&(r[a.alias]=i),!a.params||!a.params.length)return s+1;let l=0;for(;l<a.params.length;l++){const n=a.params[l];if(s+l>=e.length)void 0!==n.default?i.push(n.default):this.errors.push({text:`need ${t.yellow(a.params.length)} arguments after flag '${o}'.`,argvi:s+l});else{const t=e[s+l];try{n.validator?i.push(n.validator(t)):this.convertType(n.type,t)}catch(t){this.errors.push({text:`invalid arugments for flag "${o}", ${t.toString()}`,argvi:s+l})}}}return s+l}parseFlags(e,s,n=0){const r={},o=[],i=this.options.stopFlags;for(;n<e.length&&e[n]!==i;){const i=e[n];if("-"!=i[0])o.push(i),n++;else if("-"==i[1])if(2!=i.length){const o=i.substring(2);void 0!==s[o]?n=this.advFlag(e,n,s,r,o):this.errors.push({text:`Found argument '${t.yellow(`--${o}`)}' which wasn't expected, or isn't valid in this context.`,argvi:n++,start:2,end:i.length-2})}else this.errors.push({text:`Empty argument '${t.yellow("--")}' which wasn't expected.`,argvi:n++,start:2,end:i.length-2});else if(1!=i.length){let o=n;for(let a=1;a<=i.length-1;a++){const l=s[i[a]];void 0!==l?o=this.advFlag(e,o,s,r,l.name):this.errors.push({text:`Found argument '${t.yellow(`-${l}`)}' which wasn't expected, or isn't valid in this context.`,argvi:n,start:a,end:1})}n+=o===n?1:o}else this.errors.push({text:`Empty argument '${t.yellow("-")}' which wasn't expected.`,argvi:n++})}for(;n<e.length;)o.push(e[n++]);return[r,o]}parseCommand(e){var s;if(e[0]in this.commands){const t=this.commands[e[0]],s=Object.assign(Object.assign({},this.arguments),t.arguments);s.help&&(s.help.call=({parser:t,cmd:e})=>{e&&t.commandUsage(e)});const[n,r]=this.parseFlags(e,s,1),o=this._createContext(n,r,t);if(this.errors.length)return!1;const i=this._getCallFlag(n,s);return i?i(o):t.call&&t.call(o),!0}return"-"==e[0][0]?this.errors.push({text:`${null!==(s=this.name)&&void 0!==s?s:"programme"} need to start with command`}):this.errors.push({text:`no such subcommand: '${t.yellow(e[0])}''`,argvi:0}),!1}parseArguments(t){const[e,s]=this.parseFlags(t,this.arguments,0),n=this._createContext(e,s);if(this.errors.length)return!1;const r=this._getCallFlag(e,this.arguments);return r&&r(n),!0}parse(t){return this.argv=t,0==t.length?(this.usage(),!1):e(this.commands)?this.parseArguments(t):this.parseCommand(t)}_getCallFlag(t,e){for(const s in t){const t=e[s].call;if(t)return t}return null}get context(){if(!this._ctx)throw new Error("You need to call 'parse' before access context");return this._ctx}_createContext(t,e,s=null){const n={flags:t,anyArgs:e,parser:this,name:this.name,description:this.description,options:this.options,argv:this.argv};return s&&(n.cmd=s),this._ctx=n,n}printError(e=null){const s=this.argv,n=s.join(" ")+"\n";let r=this.errors;null!==e&&(r=[...this.errors].splice(0,e));let o="";r.forEach((e=>{if(o+=`${t.red(t.bold("error"))}: ${e.text}\n`,void 0!==e.argvi){o+=n;let r=e.argvi;for(let t=0;t<e.argvi;t++)r+=s[t].length;const i=s[e.argvi].length;let a;if(null!=e.start&&null!=e.end){a=t.red("~".repeat(e.start))+t.red(t.bold("^".repeat(e.end)));const s=i-(e.start+e.end);s>0&&(a+=t.red("~".repeat(s)))}else a=t.red(t.bold("^".repeat(i)));o+=`${" ".repeat(r)}${a}\n`}})),this.errors.length>=5&&(o+=`total errors: ${t.red(t.bold(this.errors.length))}`),console.error(o)}formatOptions(e,s="Options:"){var n;const r={};let o=0;for(const t in e){const s=e[t];r[t]=t.length,s.params&&s.params.length&&(r[t]+=s.params.reduce(((t,e)=>t+e.type.constructor.name.length),0)),o=Math.max(o,r[t])}let i=s+"\n";for(const s in e){const a=e[s];i+=a.alias?`-${a.alias}, `:"    ",i+=`--${s} `,a.params&&(i+=a.params.reduce(((t,e)=>`${t}${e.type.constructor.name} `),"")),i+=" ".repeat(o-r[s]+1),i+=null!==(n=a.description)&&void 0!==n?n:t.italic("no information.")}return i}formatCommands(t){let e=0;for(const s in t)e=Math.max(e,s.length);let s="";for(const n in t)s+=`  ${n}${" ".repeat(e-n.length)} ${t[n].description}\n`;return s}commandUsage(t){if("string"==typeof t){const e=this.commands[t];if(!e)throw new Error(`'${t}' not found in commands`);t=e}let e="";e+=`Usage: ${this.name} ${t.name} `,this.options.info?e+=this.options.info:e+="[OPTIONS]\n\n",e+=t.description,this.arguments&&(e+="\n\n"+this.formatOptions(this.arguments,"Global options:")),t.arguments&&(e+="\n\n"+this.formatOptions(t.arguments,"Command options:")),this.options.footer&&(e+=`\n\n${this.options.footer}`),console.log(e)}usage(){let t="",s=!e(this.commands),n=!e(this.arguments);t+=`Usage: ${this.name} `,this.options.info?t+=this.options.info:t+=`[OPTIONS] ${s?"COMMAND":""}\n\n`,t+=this.description,n&&(t+="\n\n"+this.formatOptions(this.arguments)),s&&(t+="\n\n"+this.formatCommands(this.commands)),this.options.footer&&(t+=`\n\n${this.options.footer}`),console.info(t)}}}));
